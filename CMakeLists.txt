cmake_minimum_required(VERSION 3.11)

set(FFPLAYST_VERSION_MAJOR 1)
set(FFPLAYST_VERSION_MINOR 0)
set(FFPLAYST_VERSION_MICRO 0)
set(FFPLAYST_VERSION ${FFPLAYST_VERSION_MAJOR}.${FFPLAYST_VERSION_MINOR}.${FFPLAYST_VERSION_MICRO})

project(ffplay-starter VERSION ${FFPLAYST_VERSION})

option(ENABLE_PCRE "Use libpcre rather than C++ standard regex library." ON)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

find_package(Yaml)
find_package(JsonC)
find_package(Iconv)
find_package(Chardet)
if (ENABLE_PCRE)
    find_package(PCRE)
endif()

if (NOT Yaml_FOUND AND NOT JsonC_FOUND)
    message(FATAL_ERROR "libjson-c or libyaml is needed to support config file.")
endif()

set(OBJS src/chariconv.h src/chariconv.cpp src/cml.h src/cml.cpp src/configfile.h
src/configfile.cpp src/console.h src/console.cpp src/fileop.h src/fileop.cpp
src/main.cpp src/starter.h src/starter.cpp src/util.h src/util.cpp)

if (JsonC_FOUND)
    set(HAVE_JSONC 1)
    list(APPEND OBJS src/jsonc.h src/jsonc.cpp)
    include_directories(${JsonC_INCLUDE_DIRS})
endif()

if (Iconv_FOUND)
    set(HAVE_ICONV 1)
    include_directories(${Iconv_INCLUDE_DIRS})
endif()

if (Chardet_FOUND)
    set(HAVE_CHARDET 1)
    list(APPEND OBJS src/chardet.h src/chardet.cpp)
    include_directories(${Chardet_INCLUDE_DIRS})
endif()

if (ENABLE_PCRE AND PCRE_FOUND)
    set(HAVE_PCRE 1)
    include_directories(${PCRE_INCLUDE_DIRS})
endif()

if (Yaml_FOUND)
    set(HAVE_YAML 1)
    list(APPEND OBJS src/yamlc.h src/yamlc.cpp)
    include_directories(${Yaml_INCLUDE_DIRS})
endif()

include(CheckSymbolExists)
include(CheckIncludeFiles)
check_symbol_exists(_wfopen_s stdio.h HAVE__WFOPEN_S)
check_symbol_exists(fopen_s stdio.h HAVE_FOPEN_S)
if (WIN32)
    check_symbol_exists(_access_s io.h HAVE__ACCESS_S)
    check_symbol_exists(_waccess_s io.h HAVE__WACCESS_S)
endif()
check_symbol_exists(strcpy_s "string.h" HAVE_STRCPY_S)
check_symbol_exists(strcat_s "string.h" HAVE_STRCAT_S)
check_symbol_exists(fseeko64 stdio.h HAVE_FSEEKO64)
check_symbol_exists(fseeko stdio.h HAVE_FSEEKO)
check_symbol_exists(_fseeki64 stdio.h HAVE__FSEEKI64)
check_symbol_exists(ftello64 stdio.h HAVE_FTELLO64)
check_symbol_exists(ftello stdio.h HAVE_FTELLO)
check_symbol_exists(_ftelli64 stdio.h HAVE__FTELLI64)
check_symbol_exists(vprintf_s stdio.h HAVE_VPRINTF_S)
check_symbol_exists(vfprintf_s stdio.h HAVE_VFPRINTF_S)
check_symbol_exists(printf_s stdio.h HAVE_PRINTF_S)
check_symbol_exists(fprintf_s stdio.h HAVE_FPRINTF_S)
check_symbol_exists(sscanf_s stdio.h HAVE_SSCANF_S)
check_symbol_exists(itoa stdlib.h HAVE_ITOA)
check_symbol_exists(_itoa_s stdlib.h HAVE__ITOA_S)
if (NOT WIN32)
    check_symbol_exists(readdir64 dirent.h HAVE_READDIR64)
endif()
CHECK_INCLUDE_FILES(getopt.h HAVE_GETOPT_H)
if ("${HAVE_GETOPT_H}" STREQUAL "")
    add_library(getopt STATIC getopt/getopt_core.h getopt/getopt_ext.h getopt/getopt_int.h
    getopt/getopt.c getopt/getopt.h getopt/getopt1.c)
    include_directories("${CMAKE_CURRENT_SOURCE_DIR}/getopt")
endif()

configure_file(config.h.in config.h)
list(APPEND OBJS "${CMAKE_CURRENT_BINARY_DIR}/config.h")
include_directories(${CMAKE_CURRENT_BINARY_DIR})
add_compile_definitions(HAVE_ST_CONFIG_H)
if (MSVC)
    add_compile_options(/utf-8)
endif()

add_executable(ffplay-starter ${OBJS})

if (JsonC_FOUND)
    target_link_libraries(ffplay-starter JsonC::JsonC)
endif()
if (Iconv_FOUND)
    target_link_libraries(ffplay-starter Iconv::Iconv)
endif()
if (Chardet_FOUND)
    target_link_libraries(ffplay-starter Chardet::Chardet)
endif()
if (ENABLE_PCRE AND PCRE_FOUND)
    target_link_libraries(ffplay-starter PCRE::PCRE)
endif()
if (TARGET getopt)
    target_link_libraries(ffplay-starter getopt)
endif()
if (Yaml_FOUND)
    target_link_libraries(ffplay-starter Yaml::Yaml)
endif()

if (NOT CMAKE_INSTALL_BINDIR)
    set(CMAKE_INSTALL_BINDIR bin)
endif()

install(TARGETS ffplay-starter RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}")
